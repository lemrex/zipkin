"use strict";

var _require = require('zipkin'),
    Instrumentation = _require.Instrumentation;

function wrapAxios(axios) {
  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  var tracer = options.tracer;
  var instrumentation = new Instrumentation.HttpClient(options);

  var zipkinRecordRequest = function zipkinRecordRequest(config) {
    return tracer.scoped(function () {
      var newConfig = instrumentation.recordRequest(config, config.url, config.method);
      newConfig.traceId = tracer.id;
      return newConfig;
    });
  };

  var zipkinRecordResponse = function zipkinRecordResponse(res) {
    return tracer.scoped(function () {
      instrumentation.recordResponse(res.config.traceId, res.status);
      return res;
    });
  };

  var zipkinRecordError = function zipkinRecordError(error) {
    return tracer.scoped(function () {
      if (error.config) {
        var traceId = error.config.traceId;

        if (error.response) {
          instrumentation.recordResponse(traceId, error.response.status);
        } else {
          instrumentation.recordError(traceId, error);
        }
      } // otherwise the error preceded the request interceptor


      return Promise.reject(error);
    });
  };

  var axiosInstance = axios;

  if (axios.create) {
    axiosInstance = axios.create();
  }

  axiosInstance.interceptors.request.use(zipkinRecordRequest, zipkinRecordError);
  axiosInstance.interceptors.response.use(zipkinRecordResponse, zipkinRecordError);
  return axiosInstance;
}

module.exports = wrapAxios;